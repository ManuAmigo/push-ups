import datetime
from typing import Optional

from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import Message

from models.bot_models import BotConfig, UserInfo, ChallengePeriod, CommentContext
from services.data_service import Storage
from services.openai_service import OpenAIClient
from services.user_repository import UserRepository
from services.pushups_parser import PushupsParser
from utils.logger import get_named_logger

logger = get_named_logger()


class BotService:
    def __init__(
        self,
        config: BotConfig,
        users: UserRepository,
        storage: Storage,
        openai_client: Optional[OpenAIClient] = None,
    ):
        self.config = config
        self.users = users
        self.storage = storage
        self.openai = openai_client
        self.parser = PushupsParser(openai_client)
        self.period = ChallengePeriod(
            start_date=config.challenge_start_date,
            end_date=config.challenge_end_date
        )

    async def handle_message(self, message: Message) -> None:
        if not message.text:
            logger.debug("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
            return

        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        text = message.text.strip()
        now = datetime.datetime.now()
        today = now.date()

        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} ({user_id}): '{text}'")

        user = self.users.get(user_id) or UserInfo(username=username, last_activity=now)
        if user.last_activity:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{username} | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity}")
        else:
            logger.debug(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}")

        user.username = username
        user.last_activity = now

        pushups, is_total = self.parser.extract_pushups_count(text)
        logger.debug(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {pushups} –æ—Ç–∂–∏–º–∞–Ω–∏–π | {'–∏—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å' if is_total else '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'}")

        if pushups <= 0:
            logger.debug("–û—Ç–∂–∏–º–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return

        if user.last_report_date != today:
            logger.debug("–ü–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π.")
            user.pushups_today = pushups
            user.total_pushups += pushups
            user.reported_today = True
            user.last_report_date = today
        else:
            if is_total:
                delta = pushups - user.pushups_today
                user.total_pushups += delta
                user.pushups_today = pushups
                logger.debug(f"–û–±–Ω–æ–≤–ª—ë–Ω –æ—Ç—á—ë—Ç: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {pushups} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {delta})")
            else:
                user.pushups_today += pushups
                user.total_pushups += pushups
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–∂–∏–º–∞–Ω–∏—è: +{pushups} ‚Üí –∏—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {user.pushups_today}")

        self.users.add_or_update(user_id, user)
        self.storage.save(self.config, self.users.all())
        logger.debug("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

        comment = "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        if self.openai:
            try:
                comment = self.openai.generate_comment(
                    user_prompt=(
                        f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è @{user.username}, "
                        f"–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∂–∞–ª—Å—è {user.pushups_today} —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è."
                    ),
                    context=CommentContext.REPORT
                )
                logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç OpenAI: {comment}")
            except Exception as e:
                logger.warning(f"OpenAI fallback: {e}")


        total_today = self.users.total_pushups_today(today)
        logger.debug(
            f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username}: {user.pushups_today} —Å–µ–≥–æ–¥–Ω—è, –≤—Å–µ–≥–æ –ø–æ –≥—Ä—É–ø–ø–µ: {total_today}"
        )

        await message.answer(
            f"‚úÖ @{user.username}: {user.pushups_today} –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            f"üí™ –ì—Ä—É–ø–ø–∞: {total_today} —Å–µ–≥–æ–¥–Ω—è.\n\n{comment}"
        )

    async def handle_mystats(self, message: Message) -> None:
        user_id = message.from_user.id
        user = self.users.get(user_id)

        if not user:
            logger.debug(f"@{message.from_user.username}: –∑–∞–ø—Ä–æ—Å /mystats ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
            return

        today = datetime.date.today()
        current_day, days_remaining = self.period.get_day_info(today)

        logger.debug(f"@{user.username}: /mystats ‚Äî {user.pushups_today} —Å–µ–≥–æ–¥–Ω—è, {user.total_pushups} –≤—Å–µ–≥–æ")

        await message.answer(
            f"üìä @{user.username}\n"
            f"–°–µ–≥–æ–¥–Ω—è: {user.pushups_today} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"–í—Å–µ–≥–æ: {user.total_pushups} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"–î–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞: #{current_day} (–æ—Å—Ç–∞–ª–æ—Å—å {days_remaining})"
        )

    async def handle_stats(self, message: Message) -> None:
        today = datetime.date.today()
        total_today = self.users.total_pushups_today(today)
        total_all = self.users.total_pushups_all_time()
        current_day, _ = self.period.get_day_info(today)

        logger.debug(f"/stats: —Å–µ–≥–æ–¥–Ω—è {total_today}, –≤—Å–µ–≥–æ {total_all}")

        top_today = self.users.sorted_by_pushups_today(today)
        top_list = ""
        if top_today:
            top_list += "üî• –¢–æ–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            for i, (uid, u) in enumerate(top_today, 1):
                top_list += f"{i}. @{u.username}: {u.pushups_today}\n"

        await message.answer(
            f"üìà –°–µ–≥–æ–¥–Ω—è –≥—Ä—É–ø–ø–∞ —Å–¥–µ–ª–∞–ª–∞: {total_today} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"üèÜ –í—Å–µ–≥–æ: {total_all} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"üìÖ –î–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞: #{current_day}\n\n"
            f"{top_list}"
        )

    async def handle_change_stat(self, message: Message) -> None:
        user_id = message.from_user.id
        args = message.text.strip().split()

        if len(args) < 2 or not args[1].isdigit():
            logger.debug("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç /changemydailystats")
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä: /changemydailystats 100")
            return

        new_value = int(args[1])
        user = self.users.get(user_id)

        if not user:
            logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ /changemydailystats")
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
            return

        today = datetime.date.today()
        old_value = user.pushups_today
        delta = new_value - old_value

        user.pushups_today = new_value
        user.total_pushups += delta
        user.last_report_date = today
        user.last_activity = datetime.datetime.now()

        self.users.add_or_update(user_id, user)
        self.storage.save(self.config, self.users.all())

        logger.debug(f"/changemydailystats: @{user.username} {old_value} ‚û°Ô∏è {new_value} (+{delta})")
        await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–æ: {old_value} ‚û°Ô∏è {new_value} –æ—Ç–∂–∏–º–∞–Ω–∏–π.")

    async def handle_setgroup(self, message: Message) -> None:
        if message.chat.type not in ("group", "supergroup"):
            logger.debug("/setgroup –≤—ã–∑–≤–∞–Ω –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã")
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return

        self.config.chat_id = message.chat.id
        self.storage.save(self.config, self.users.all())

        logger.info(f"–ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è: chat_id={self.config.chat_id}")
        await message.answer(f"–ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! chat_id: <code>{self.config.chat_id}</code>")

    async def handle_config(self, message: Message) -> None:
        cfg = self.config
        logger.debug(f"/config: {cfg}")
        await message.answer(
            f"üõ† <b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
            f"Chat ID: <code>{cfg.chat_id}</code>\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{cfg.reminder_time}</b>\n"
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {cfg.warning_days} –¥–Ω\n"
            f"–£–¥–∞–ª–µ–Ω–∏–µ: {cfg.inactivity_days} –¥–Ω\n"
            f"–ß–µ–ª–ª–µ–Ω–¥–∂: {cfg.challenge_start_date} ‚Üí {cfg.challenge_end_date}"
        )

    async def handle_welcome_new(self, message: Message) -> None:
        for member in message.new_chat_members:
            if member.is_bot:
                continue
            username = member.username or member.full_name
            logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: @{username}")
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n"
                f"–ù–µ –∑–∞–±—É–¥—å –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏–º–µ—Ä: 25+25+25=75\n"
                f"–ö–æ–º–∞–Ω–¥—ã: /mystats, /stats"
            )

    async def handle_adminstats(self, message: Message, bot: Bot) -> None:
        try:
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.status not in ("creator", "administrator"):
                await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                return
        except TelegramForbiddenError:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        total_users = len(self.users.all())
        active_today = len(self.users.get_active_today())
        inactive_4d = len(self.users.get_inactive_for_days(self.config.inactivity_days))
        never_reported = [
            u.username for u in self.users.all().values()
            if not u.last_report_date
        ]

        top_total = self.users.sorted_by_total_pushups()[:5]

        logger.debug(f"/adminstats: {total_users} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {active_today} –∞–∫—Ç–∏–≤–Ω—ã, {inactive_4d} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")

        text = (
            "<b>üìä –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{total_users}</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: <b>{active_today}</b>\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã {self.config.inactivity_days}+ –¥–Ω–µ–π: <b>{inactive_4d}</b>\n\n"
        )

        if never_reported:
            text += "‚ùó –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç—á–∏—Ç—ã–≤–∞–ª–∏—Å—å:\n"
            text += "\n".join(f"‚Ä¢ @{name}" for name in never_reported[:10]) + "\n\n"

        if top_total:
            text += "üèÜ –¢–æ–ø-5 –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–∞–º:\n"
            for i, (_, user) in enumerate(top_total, 1):
                text += f"{i}. @{user.username}: {user.total_pushups} –æ—Ç–∂.\n"

        await message.answer(text)