# utils/logger.py
import inspect
import logging
import pathlib
import textwrap
from pathlib import Path

LOGS_DIR = Path("logs")
LOGS_DIR.mkdir(exist_ok=True)

# --- üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ---
_allowed_named_loggers = set()


class NamedFilter(logging.Filter):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"""
    def filter(self, record: logging.LogRecord) -> bool:
        return record.name in _allowed_named_loggers


class WrappedFormatter(logging.Formatter):
    def __init__(self, *args, width: int = 100, indent: str = " " * 42, **kwargs):
        super().__init__(*args, **kwargs)
        self.width = width
        self.indent = indent

    def format(self, record: logging.LogRecord) -> str:
        original = super().format(record)
        parts = original.split(" | ", 3)
        if len(parts) < 4:
            return original
        header = " | ".join(parts[:3])
        message = parts[3]
        wrapped = textwrap.fill(message, width=self.width, subsequent_indent=self.indent)
        return f"{header} | {wrapped}"


def get_named_logger(level=logging.DEBUG) -> logging.Logger:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.
    """
    frame = inspect.stack()[1]
    module = inspect.getmodule(frame[0])
    filename = pathlib.Path(module.__file__).stem if module and module.__file__ else "__main__"

    _allowed_named_loggers.add(filename)  # üí• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–∞–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π
    logger = logging.getLogger(filename)
    logger.setLevel(level)
    return logger


def setup_logger(mode: str = "named", log_file: str = "bot.log", level=logging.INFO) -> None:
    log_path = LOGS_DIR / log_file

    file_formatter = WrappedFormatter(
        fmt="%(asctime)s | %(levelname)s | %(name)s:%(lineno)d | %(message)s",
        datefmt="%m-%d %H:%M:%S",
        width=100,
        indent=" " * 42
    )

    console_formatter = logging.Formatter(
        fmt="%(asctime)s | %(levelname)s | %(name)s:%(lineno)d | %(message)s",
        datefmt="%m-%d %H:%M:%S"
    )

    file_handler = logging.FileHandler(log_path, encoding="utf-8")
    file_handler.setFormatter(file_formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)

    if mode == "silent":
        logging.getLogger().handlers.clear()
        logging.getLogger().disabled = True
        return

    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    root_logger.handlers.clear()

    if mode == "all":
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)

    elif mode == "named":
        file_handler.addFilter(NamedFilter())
        console_handler.addFilter(NamedFilter())
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)

    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π 'all', 'named' –∏–ª–∏ 'silent'")
